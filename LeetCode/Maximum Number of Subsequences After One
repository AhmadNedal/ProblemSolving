class Solution {
public:
    long long numOfSubsequences(string s) {
        
        
        long long countL = 0, countC = 0, countT = 0,LC = 0, CT = 0,existing = 0;

        for (char ch : s) {
            if (ch == 'T') {
                CT += countC;
                existing += LC;
                countT++;
            }
            else if (ch == 'C') {
                LC += countL;
                countC++;
            }
            else if (ch == 'L') {
                countL++;
            }
        }

        int n = s.size(); 
        long long arr[n];
        long long arr2[n];
        
        memset(arr , 0 , sizeof arr ); 
        memset(arr2 , 0, sizeof arr2 ); 

        if (s[0]=='L')arr[0]=1; 
        
        for(int i=1;i<s.size();++i){
            arr[i]+=arr[i-1]; 
            if(s[i]=='L')arr[i]+=1; 
        }
        
        if(s[s.size()-1]=='T')arr2[s.size()-1]=1; 
        
        for(int i=s.size()-2;i>-1;--i){
            arr2[i]+=arr2[i+1]; 
            if(s[i]=='T')arr2[i]+=1; 
        }

        long long ans =0 ;
        for ( int i =0 ; i < s.size();++i)
             ans = max(ans , arr[i]*arr2[i]); 
   

        
    

        
        long long AddL = CT;
        long long AddT = LC;

        return existing + max({AddL, ans, AddT});
    }
};
