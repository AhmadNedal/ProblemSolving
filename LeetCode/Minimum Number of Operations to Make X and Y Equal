class Solution {
public:

    int minimumOperationsToMakeEqual(int x, int y) {
       
        queue <pair <int ,int >>q; 
        map <int,bool>vis ; 
        int ans =-1; 
        q.push({x,0});
        vis[x]=true; 
        if(x==y)return 0 ;


        while(!q.empty()){
            pair <int,int > it = q.front(); 
            q.pop (); 


            if(it.first == y ){
                return it.second; 
            }



            if(it.first%11==0&&!vis[it.first/11]&&it.first>=0 && it.first<=1e4){
                q.push({it.first/11,it.second+1});
                vis[it.first/11] = true ; 

            }
            if(it.first%5==0&&!vis[it.first/5]&&it.first>=0 && it.first<=1e4){
                vis[it.first/5]=true ; 
                q.push({it.first/5,it.second+1});
            }
            if(it.first!=1e4&&!vis[it.first+1]&&it.first>=0 && it.first<=1e4){
                vis[it.first+1]=true ; 
                q.push({it.first+1,it.second+1});
            }
            if(it.first!=0&&!vis[it.first-1]&&it.first>=0 && it.first<=1e4){
                vis[it.first-1]=true ; 
                q.push({it.first-1,it.second+1});
            }
        }       


        return ans ; 
     
    
    }



    // int rec ( int x ) {
    //     if(x==yy)return 0 ; 

    //     if(x<0||x>yy)return 1e6+1; 


    //     int res = 1e6+1 ; 
    //     if(m.count(x)){
    //         return m[x]; 
    //     }
    //     if(x%11==0){
    //         res = rec(x/11)+1;
    //     }
    //     if(x%5==0){
    //         res = min (res, rec(x/5)+1); 
        
    //     }
        
        

    //     if(x<yy){
    //         res = min(res , rec(x+1)+1 ); 
    //     }else {
    //         res = min(res , rec(x-1)+1 ); 
    //     }
        
    //     return m[x]=res ; 

    // }
};
